install.packages("randomForest")
install.packages("caret")
install.packages("pROC")
install.packages("ROSE")
install.packages("knitr")
install.packages("magrittr")
install.packages("gridExtra")
install.packages("GGally")
install.packages("rpart.plot")
install.packages("BaylorEdPsych")
install.packages("mvnmle")
install.packages("pscl")
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
install.packages(c("RCOR", "randomForest"))
install.packages("DT")
install.packages("ROCR")
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
install.packages("gplots")
install.packages("randomForest")
#importing the libs
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
#importing the libs
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
library("randomForest")
library(gplot)
library(gplots)
install.packages(c("gplots", "randomForest"))
missmap()
missmap(raw_train)
missmap(raw_test)
library(Amelia)
missmap(raw_train)
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data[data == -99] <- NA
data %>%
select(-sku) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0))
}
preprocess_data <- function(data) {
data %>% mutate(deck_risk = as.factor(deck_risk)) %>%
mutate(oe_constraint = as.factor(oe_constraint)) %>%
mutate(ppap_risk = as.factor(ppap_risk)) %>%
mutate(stop_auto_buy = as.factor(stop_auto_buy)) %>%
mutate(rev_stop = as.factor(rev_stop)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
transform_train_1 <- preprocess_raw_data(raw_train)
transform_test_1 <- preprocess_raw_data(raw_test)
#input data
raw_train <- read.csv("~/Kaggle_Training_Dataset_v2.csv")
raw_test <- read.csv("~/Kaggle_Test_Dataset_v2.csv")
#basic analysis on train
str(raw_train)
head(raw_train)
raw_train$went_on_backorder %>% table() %>% prop.table()
# Examine the testing dataset
str(raw_test)
head(raw_test)
raw_test$went_on_backorder %>% table() %>% prop.table()
library(magrittr)
raw_train$went_on_backorder %>% table() %>% prop.table()
str(raw_train)
head(raw_train)
raw_train$went_on_backorder %>% table() %>% prop.table()
# Examine the testing dataset
str(raw_test)
head(raw_test)
raw_test$went_on_backorder %>% table() %>% prop.table()
glimpse(raw_train)
#Showing the data imbalance and showing its visual data
qplot( as.factor(raw_train$went_on_backorder) ) +
geom_bar() +
labs(x="went_on_backorder", y="Count")
missmap(raw_train)
missmap(raw_test)
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data[data == -99] <- NA
data %>%
select(-sku) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0))
}
preprocess_data <- function(data) {
data %>% mutate(deck_risk = as.factor(deck_risk)) %>%
mutate(oe_constraint = as.factor(oe_constraint)) %>%
mutate(ppap_risk = as.factor(ppap_risk)) %>%
mutate(stop_auto_buy = as.factor(stop_auto_buy)) %>%
mutate(rev_stop = as.factor(rev_stop)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
# Correlation matrix
str(transform_train_1)
corr <- round(cor(transform_train_1, use = "pairwise.complete.obs"), 2)
tail(corr)
library(reshape2)
# Applying the function created above to training set
transform_train_1 <- preprocess_raw_data(raw_train)
transform_test_1 <- preprocess_raw_data(raw_test)
library(unbalanced)
library(unbalanced)
install.packages("tibble")
library(unbalanced)
names(raw_train)
library(h2o)
library(tidyquant)
library(unbalanced)
library(dplyr)
library(ggplot2)
library(gplots)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
library(Amelia)
library(magrittr)
library(ggcorrplot)
library(reshape2)
library(DataExplorer)
library(e1071)
library(pscl)
library(h2o)
library(tidyquant)
library(unbalanced)
library(dplyr)
library(ggplot2)
library(gplots)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
library(Amelia)
library(magrittr)
library(ggcorrplot)
library(reshape2)
library(DataExplorer)
library(e1071)
library(pscl)
raw_train <- read.csv("~/Kaggle_Training_Dataset_v2.csv")
raw_test <- read.csv("~/Kaggle_Test_Dataset_v2.csv")
raw_train$went_on_backorder %>% table() %>% prop.table()
raw_test$went_on_backorder %>% table() %>% prop.table()
qplot( as.factor(raw_train$went_on_backorder) ) +
geom_bar() +
labs(x="went_on_backorder", y="Count")
missmap(raw_train)
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data[data == -99] <- NA
data %>%
select(-sku) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0))
}
preprocess_data <- function(data) {
data %>% mutate(deck_risk = as.factor(deck_risk)) %>%
mutate(oe_constraint = as.factor(oe_constraint)) %>%
mutate(ppap_risk = as.factor(ppap_risk)) %>%
mutate(stop_auto_buy = as.factor(stop_auto_buy)) %>%
mutate(rev_stop = as.factor(rev_stop)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
transform_train_1 <- preprocess_raw_data(raw_train)
transform_test_1 <- preprocess_raw_data(raw_test)
plot_missing(transform_train)
library(h2o)
library(tidyquant)
library(unbalanced)
library(dplyr)
library(ggplot2)
library(gplots)
library(grid)
library(gridExtra)
library(DT)
library(GGally)
library(randomForest)
library(rpart)
library(caret)
library(pROC)
library(ROSE)
library(magrittr)
library(tidyr)
library(rpart.plot)
library(tibble)
library(ROCR)
library(purrr)
library(Amelia)
library(magrittr)
library(ggcorrplot)
library(reshape2)
library(DataExplorer)
library(e1071)
library(pscl)
raw_train <- read.csv("~/Kaggle_Training_Dataset_v2.csv")
raw_test <- read.csv("~/Kaggle_Test_Dataset_v2.csv")
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data[data == -99] <- NA
data %>%
select(-sku) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0))
}
preprocess_data <- function(data) {
data %>% mutate(deck_risk = as.factor(deck_risk)) %>%
mutate(oe_constraint = as.factor(oe_constraint)) %>%
mutate(ppap_risk = as.factor(ppap_risk)) %>%
mutate(stop_auto_buy = as.factor(stop_auto_buy)) %>%
mutate(rev_stop = as.factor(rev_stop)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
transform_train_1 <- preprocess_raw_data(raw_train)
transform_test_1 <- preprocess_raw_data(raw_test)
transform_train <- preprocess_data(transform_train_1)
transform_test <- preprocess_data(transform_test_1)
clean_function <- function(data) {
data %>%
select(-lead_time, -perf_12_month_avg , -perf_6_month_avg )
}
clean_train <- clean_function(transform_train)
clean_test <- clean_function(transform_test)
any(is.na(clean_train))
train_balanced_both <- ovun.sample(went_on_backorder~ ., data=clean_train,p=0.5, seed=1, N = 500000, method="both")$data
table(train_balanced_both$went_on_backorder) # showing result after both under and oversampling
View(train_balanced_both)
qplot( as.factor(train_balanced_both$went_on_backorder) ) +
geom_bar() +
labs(x="went_on_backorder", y="Count")
train_balanced_under <- ovun.sample(went_on_backorder ~ ., data = clean_train, method = "under", N = 20000, seed = 1)$data
table(train_balanced_under$went_on_backorder) # Showing the result after undersamling
qplot( as.factor(train_balanced_both$went_on_backorder) ) +
geom_bar() +
labs(x="went_on_backorder", y="Count")
any(is.na(train_balanced_both))
any(is.na(train_balanced_under))
sim_tree <- rpart(formula = went_on_backorder ~ . ,
data = train_balanced_both,
method = "class",
parms = list(split='information'),
control = rpart.control(maxdepth = 5, minsplit = 70, cp = 0.0014 ))
rpart.plot(sim_tree)
# Generate predicted classes using the model object
class_prediction <- predict(sim_tree, transform_test, type = "class")
# Calculate the confusion matrix for the test set not working need check the reason
confusionMatrix(class_prediction, transform_test$went_on_backorder)
class_prediction
View(class_prediction)
plot_missing(clean_train)
plot_missing(transform_train)
