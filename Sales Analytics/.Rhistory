valid_df <- preprocess_raw_data(valid_raw_df)
test_df  <- preprocess_raw_data(test_raw_df)
library("unbalanced");
library("tidyquant");
library("h2o");
#inputing the dataset
train_raw_df  <- read.csv("Kaggle_Training_Dataset_v2.csv");
test_raw_df   <- read.csv("Kaggle_Test_Dataset_v2.csv");
#analysing the data
#checking -99  and Na in diffrent columns
train_raw_df %>% head() %>% knitr::kable()
#result for last NA row
train_raw_df %>% tail() %>% knitr::kable()
#checking of balance of data
# Unbalanced data set
train_raw_df$went_on_backorder %>% table() %>% prop.table()
#insepecing missing values
#train set: Percentage of complete cases
train_raw_df %>% complete.cases() %>% sum() / nrow(train_raw_df)
# test set: Percentage of complete cases
test_raw_df %>% complete.cases() %>% sum() / nrow(test_raw_df)
#showing glimpse of all data
glimpse(train_raw_df)
#for assitance in modeling we need valid dataset so from the training dataset lets create 85/15 ration of valid dataset
split_pct <- 0.85
n <- nrow(train_raw_df)
sample_size <- floor(split_pct * n)
set.seed(159)
idx_train <- sample(1:n, size = sample_size)
valid_raw_df <- train_raw_df[-idx_train,]
train_raw_df <- train_raw_df[idx_train,]
#need to do many trails on above section
library("unbalanced");
library("tidyquant");
library("h2o");
#inputing the dataset
train_raw_df  <- read.csv("Kaggle_Training_Dataset_v2.csv");
test_raw_df   <- read.csv("Kaggle_Test_Dataset_v2.csv");
#analysing the data
#checking -99  and Na in diffrent columns
train_raw_df %>% head() %>% knitr::kable()
#result for last NA row
train_raw_df %>% tail() %>% knitr::kable()
#checking of balance of data
# Unbalanced data set
train_raw_df$went_on_backorder %>% table() %>% prop.table()
#insepecing missing values
#train set: Percentage of complete cases
train_raw_df %>% complete.cases() %>% sum() / nrow(train_raw_df)
# test set: Percentage of complete cases
test_raw_df %>% complete.cases() %>% sum() / nrow(test_raw_df)
#showing glimpse of all data
glimpse(train_raw_df)
#for assitance in modeling we need valid dataset so from the training dataset lets create 85/15 ration of valid dataset
split_pct <- 0.85
n <- nrow(train_raw_df)
sample_size <- floor(split_pct * n)
set.seed(159)
idx_train <- sample(1:n, size = sample_size)
valid_raw_df <- train_raw_df[-idx_train,]
train_raw_df <- train_raw_df[idx_train,]
#need to do many trails on above section
#preprocessing phase and making data balance
# Custom pre-processing function
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data %>%
select(-sku) %>%
drop_na(national_inv) %>%
mutate(lead_time = ifelse(is.na(lead_time), -99, lead_time)) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
train_df <- preprocess_raw_data(train_raw_df)
valid_df <- preprocess_raw_data(valid_raw_df)
test_df  <- preprocess_raw_data(test_raw_df)
#after preprocessing checking can use "STR" also
glimpse(train_df)
#stage for unbalancing
input  <- train_df %>% select(-went_on_backorder)
#train_balanced <- ubSMOTE(input, output, perc.over = 200, perc.under = 200, k = 5)
#must show error
#Error in T[i, ] : subscript out of bounds
#In addition: There were 42 warnings (use warnings() to see them)
#Timing stopped at: 0.01 0 0.01
#solution from last solution making value as factor and before the numberic -2
output <- as.factor(as.numeric(train_df$went_on_backorder)-2)
train_balanced <- ubSMOTE(input, output, perc.over = 200, perc.under = 200, k = 5 , verbose = TRUE)
train_df <- bind_cols(as.tibble(train_balanced$X), tibble(went_on_backorder = train_balanced$Y))
train_df
#checking the value again
train_df$went_on_backorder %>% table() %>% prop.table()
#wokring with H2o now
h2o.init()
h2o.no_progress()
#making data compatible to H2o
train_h2o <- as.h2o(train_df)
valid_h2o <- as.h2o(valid_df)
test_h2o  <- as.h2o(test_df)
#making model for automatic machine learning
# Automatic Machine Learning
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 20
)
#executing the function
automl_leader <- automl_models_h2o@leader
#tring to pridict data
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
as.tibble(pred_h2o)
#after modelling checking for prediction
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
as.tibble(pred_h2o)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
#executing the function
automl_leader <- automl_models_h2o@leader
#tring to pridict data
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
as.tibble(pred_h2o)
#after modelling checking for prediction
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
as.tibble(pred_h2o)
perf_h2o <- h2o.performance(automl_leader, newdata = test_h2o)
h2o.metric(perf_h2o) %>%
as.tibble() %>%
glimpse()
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
as.tibble(pred_h2o)
train_raw_df %>% head() %>% knitr::kable()
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
automl_leader
View(automl_leader)
View(automl_leader)
train_h2o <- as.h2o(train_df)
valid_h2o <- as.h2o(valid_df)
test_h2o  <- as.h2o(test_df)
#making model for automatic machine learning
# Automatic Machine Learning
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
#executing the function
automl_leader <- automl_models_h2o@leader
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
View(automl_leader)
View(automl_leader)
View(automl_models_h2o)
View(automl_models_h2o)
h2o.predict()
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o, newdata = "dummy")
pred_h2o <- h2o.predict(automl_leader, newdata = "dummy")
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
h2o.predict()
automl_leader <- automl_models_h2o@leader
automl_models_h2o@project_name
automl_models_h2o@leaderboard
automl_models_h2o@leader
automl_leader <- automl_models_h2o@leader
automl_leader
isH2oFrame(automl_leader)
as.isH2oFrame(automl_leader)
h2o.isH2oFrame(automl_leader)
automl_leader
View(automl_leader)
automl_leader@model_id = "abc"
automl_leader
View(automl_leader)
automl_leader@model_id = "abc"
automl_leader@model_id
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
automl_models_h2o
automl_models_h2o@project_name
automl_leader@model_id = "automl_train_df"
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
automl_models_h2o@project_name
automl_models_h2o@leaderboard
automl_models_h2o@leaderboard
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
h2o.isH2oFrame(automl_leader)
automl_leader <- automl_models_h2o@leader
automl_models_h2o@leaderboard
automl_leader@model_id = ""
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
#executing the function
automl_leader <- automl_models_h2o@leader
automl_leader@model_id = ""
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
automl_leader@model_id = " "
#after modelling checking for prediction
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
train_h2o <- as.factor(train_h2o[ ,y])
test_h2o <- as.factor(test_h2o[ ,y])
valid_h2o <- as.factor(valid_h2o[ ,y])
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
x
x
y
x
train_h2o <- as.h2o(train_df)
valid_h2o <- as.h2o(valid_df)
test_h2o  <- as.h2o(test_df)
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
y
x
train_h2o <- as.factor(train_h2o[ ,y])
train_h2o
train_h2o <- as.h2o(train_df)
valid_h2o <- as.h2o(valid_df)
test_h2o  <- as.h2o(test_df)
#making model for automatic machine learning
# Automatic Machine Learning
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
train_h2o <- as.factor(train_h2o[ ,x])
train_h2o[ ,y] <- as.factor(train_h2o[ ,y])
test_h2o[ ,y] <- as.factor(test_h2o[ ,y])
valid_h2o[ ,y] <- as.factor(valid_h2o[ ,y])
train_h2o <- as.h2o(train_df)
train_h2o[ ,y] <- as.factor(train_h2o[ ,y])
train_h2o
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
#executing the function
automl_leader <- automl_models_h2o@leader
automl_models_h2o@leaderboard
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
as.tibble(pred_h2o)
automl_models_h2o@leaderboard
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45
)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 20
)
#executing the function
automl_models_h2o@leaderboard
automl_leader <- automl_models_h2o@leader
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 45,
max_models = 10
)
automl_models_h2o@leaderboard
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 600
)
automl_models_h2o@leaderboard
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 600
)
#executing the function
automl_models_h2o@leaderboard
library("unbalanced");
library("tidyquant");
library("h2o");
#inputing the dataset
train_raw_df  <- read.csv("Kaggle_Training_Dataset_v2.csv");
test_raw_df   <- read.csv("Kaggle_Test_Dataset_v2.csv");
#analysing the data
#checking -99  and Na in diffrent columns
train_raw_df %>% head() %>% knitr::kable()
#result for last NA row
train_raw_df %>% tail() %>% knitr::kable()
#checking of balance of data
# Unbalanced data set
train_raw_df$went_on_backorder %>% table() %>% prop.table()
#insepecing missing values
#train set: Percentage of complete cases
train_raw_df %>% complete.cases() %>% sum() / nrow(train_raw_df)
# test set: Percentage of complete cases
test_raw_df %>% complete.cases() %>% sum() / nrow(test_raw_df)
#showing glimpse of all data
glimpse(train_raw_df)
#for assitance in modeling we need valid dataset so from the training dataset lets create 85/15 ration of valid dataset
split_pct <- 0.85
n <- nrow(train_raw_df)
sample_size <- floor(split_pct * n)
set.seed(159)
idx_train <- sample(1:n, size = sample_size)
valid_raw_df <- train_raw_df[-idx_train,]
train_raw_df <- train_raw_df[idx_train,]
#need to do many trails on above section
#preprocessing phase and making data balance
# Custom pre-processing function
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data %>%
select(-sku) %>%
drop_na(national_inv) %>%
mutate(lead_time = ifelse(is.na(lead_time), -99, lead_time)) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
train_df <- preprocess_raw_data(train_raw_df)
valid_df <- preprocess_raw_data(valid_raw_df)
test_df  <- preprocess_raw_data(test_raw_df)
#after preprocessing checking can use "STR" also
glimpse(train_df)
#stage for unbalancing
input  <- train_df %>% select(-went_on_backorder)
#train_balanced <- ubSMOTE(input, output, perc.over = 200, perc.under = 200, k = 5)
#must show error
#Error in T[i, ] : subscript out of bounds
#In addition: There were 42 warnings (use warnings() to see them)
#Timing stopped at: 0.01 0 0.01
#solution from last solution making value as factor and before the numberic -2
output <- as.factor(as.numeric(train_df$went_on_backorder)-2)
train_balanced <- ubSMOTE(input, output, perc.over = 200, perc.under = 200, k = 5 , verbose = TRUE)
train_df <- bind_cols(as.tibble(train_balanced$X), tibble(went_on_backorder = train_balanced$Y))
train_df
#checking the value again
train_df$went_on_backorder %>% table() %>% prop.table()
#wokring with H2o now
h2o.init()
h2o.no_progress()
#making data compatible to H2o
train_h2o <- as.h2o(train_df)
valid_h2o <- as.h2o(valid_df)
test_h2o  <- as.h2o(test_df)
#making model for automatic machine learning
# Automatic Machine Learning
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
train_h2o[ ,y] <- as.factor(train_h2o[ ,y])
test_h2o[ ,y] <- as.factor(test_h2o[ ,y])
valid_h2o[ ,y] <- as.factor(valid_h2o[ ,y])
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 3600
)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 3600
)
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 3600
)
#executing the function
automl_models_h2o@leaderboard
library("unbalanced");
library("tidyquant");
library("h2o");
train_raw_df  <- read.csv("Kaggle_Training_Dataset_v2.csv");
test_raw_df   <- read.csv("Kaggle_Test_Dataset_v2.csv");
#checking -99  and Na in diffrent columns
train_raw_df %>% head() %>% knitr::kable()
#result for last NA row
train_raw_df %>% tail() %>% knitr::kable()
# Unbalanced data set
train_raw_df$went_on_backorder %>% table() %>% prop.table()
train_raw_df$went_on_backorder %>% table()
#train set: Percentage of complete cases
train_raw_df %>% complete.cases() %>% sum() / nrow(train_raw_df)
glimpse(train_raw_df)
str(train_raw_df)
split_pct <- 0.85
n <- nrow(train_raw_df)
sample_size <- floor(split_pct * n)
n
sample_size
set.seed(159)
idx_train <- sample(1:n, size = sample_size)
idx_train
valid_raw_df <- train_raw_df[-idx_train,]
train_raw_df <- train_raw_df[idx_train,]
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data %>%
select(-sku) %>%
drop_na(national_inv) %>%
mutate(lead_time = ifelse(is.na(lead_time), -99, lead_time)) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
preprocess_raw_data <- function(data) {
# data = data frame of backorder data
data %>%
select(-sku) %>%
drop_na(national_inv) %>%
mutate(lead_time = ifelse(is.na(lead_time), -99, lead_time)) %>%
mutate_if(is.character, .funs = function(x) ifelse(x == "Yes", 1, 0)) %>%
mutate(went_on_backorder = as.factor(went_on_backorder))
}
train_df <- preprocess_raw_data(train_raw_df)
valid_df <- preprocess_raw_data(valid_raw_df)
test_df  <- preprocess_raw_data(test_raw_df)
glimpse(train_df)
input  <- train_df %>% select(-went_on_backorder)
as.numeric(train_df$went_on_backorder)
output <- as.factor(as.numeric(train_df$went_on_backorder)-2)
output
train_balanced <- ubSMOTE(input, output, perc.over = 200, perc.under = 200, k = 5 , verbose = TRUE)
train_df <- bind_cols(as.tibble(train_balanced$X), tibble(went_on_backorder = train_balanced$Y))
train_df
train_df <- bind_cols(as.tibble(train_balanced$X), tibble(went_on_backorder = train_balanced$Y))
train_df
as.numeric(train_df$went_on_backorder)
train_df <- bind_cols(as.tibble(train_balanced$X), tibble(went_on_backorder = train_balanced$Y))
train_df
View(train_df)
train_df$went_on_backorder %>% table() %>% prop.table()
h2o.init()
h2o.no_progress()
#making data compatible to H2o
train_h2o <- as.h2o(train_df)
valid_h2o <- as.h2o(valid_df)
test_h2o  <- as.h2o(test_df)
y <- "went_on_backorder"
x <- setdiff(names(train_h2o), y)
y
x
train_h2o[ ,y] <- as.factor(train_h2o[ ,y])
test_h2o[ ,y] <- as.factor(test_h2o[ ,y])
valid_h2o[ ,y] <- as.factor(valid_h2o[ ,y])
automl_models_h2o <- h2o.automl(
x = x,
y = y,
training_frame    = train_h2o,
validation_frame  = valid_h2o,
leaderboard_frame = test_h2o,
max_runtime_secs  = 20
)
automl_models_h2o
automl_models_h2o@project_name
automl_models_h2o@leaderboard
automl_models_h2o@leader
automl_leader <- automl_models_h2o@leader
pred_h2o <- h2o.predict(automl_leader, newdata = test_h2o)
automl_leader
automl_leader@model_id
automl_leader@algorithm
